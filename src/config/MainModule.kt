package config

import com.mongodb.ConnectionString
import com.natpryce.konfig.Configuration
import handlers.SimpleConnectHandler
import handlers.SimpleDisconnectHandler
import handlers.SimplePublishHandler
import io.netty.handler.codec.mqtt.MqttQoS
import io.vertx.core.AsyncResult
import io.vertx.core.Handler
import io.vertx.core.Vertx
import io.vertx.ext.consul.CheckOptions
import io.vertx.ext.consul.ConsulClient
import io.vertx.ext.consul.ConsulClientOptions
import io.vertx.ext.consul.ServiceOptions
import io.vertx.mqtt.MqttClient
import io.vertx.mqtt.MqttClientOptions
import io.vertx.mqtt.messages.MqttConnAckMessage
import kotlinx.serialization.json.Json
import org.http4k.client.ApacheClient
import org.http4k.core.Request
import org.http4k.core.Response
import org.koin.core.qualifier.named
import org.koin.dsl.module
import org.litote.kmongo.KMongo

val serviceName = "service"

val mainModule = module {
    single{
        MqttClientOptions().apply {
            isAutoKeepAlive = true
            isAutoGeneratedClientId = true
        }
    }

    single { Vertx.vertx() }

    single { TokenStorage() }

    single {
        MqttClient.create(
            get(),
            get()
        ) as MqttClient
    }

    single {
        val config : Configuration by inject()

        val user = config[dbuser]
        val password = config[dbpassword]
        val host = config[dburl]
        val port = config[dbport]

        ConnectionString(
            "mongodb://$user:$password@$host:$port/?authSource=admin&readPreference=primary"
        )
    }

    factory {
        KMongo.createClient(get<ConnectionString>())
    }

    single {
        val config = get<Configuration>()
        ConsulClientOptions().apply {
            host = config[consulhost]
            port = config[consulport]
    } }
    
    single<ConsulClient> { ConsulClient.create(get(),get())}

    single {
        ServiceOptions()
        .setName(serviceName)
        //.setId("serviceId")
        .setTags(listOf("mqtt", "vertx"))
        .setCheckOptions(CheckOptions().setTtl("60s"))
        .setPort(1883)
    }

    single {
        Json {
            ignoreUnknownKeys = true
        }
    }

    single(named("disconnectHandler")) { SimpleDisconnectHandler as Handler<*>}
    single(named("connectHandler")) { SimpleConnectHandler as Handler<*>}
    single(named("publishHandler")) { SimplePublishHandler as Handler<*>}

    //add topics to subscribe to
    single(named("topics")) {
        mapOf(
                "action/+" to MqttQoS.EXACTLY_ONCE.value(),
                "state/get" to MqttQoS.AT_LEAST_ONCE.value(),
                "state/update/+/+" to MqttQoS.EXACTLY_ONCE.value()
        )
    }
}