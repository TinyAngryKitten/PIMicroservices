package config

import com.natpryce.konfig.Configuration
import handlers.SimpleConnectHandler
import handlers.SimpleDisconnectHandler
import handlers.SimplePublishHandler
import handlers.SimplePublisher
import io.netty.handler.codec.mqtt.MqttQoS
import io.vertx.core.AsyncResult
import io.vertx.core.Handler
import io.vertx.core.Vertx
import io.vertx.mqtt.MqttClient
import io.vertx.mqtt.MqttClientOptions
import io.vertx.mqtt.messages.MqttConnAckMessage
import org.koin.core.qualifier.named
import org.koin.dsl.module
import wmi.getWMIData

val mainModule = module {
    single{
        MqttClientOptions().apply {
            isAutoKeepAlive = true
            isAutoGeneratedClientId = true
        }
    }

    single {
        MqttClient.create(
            Vertx.vertx(),
            get()
        ) as MqttClient
    }

    single(named("disconnectHandler")) { SimpleDisconnectHandler as Handler<*>}
    single(named("connectHandler")) { SimpleConnectHandler as Handler<*>}
    single(named("publishHandler")) { SimplePublishHandler as Handler<*>}

    //add topics to subscribe to
    single(named("topics")) {
        mapOf<String,Int>()
    }

    single(named("publish")){
        val publisher = SimplePublisher()

        return@single { map:Map<String,String> -> publisher.publish(map)}
        }

    single(named("getPCStatMap")) { { getWMIData() } }

    single(named("baseTopic")) {"computer/${get<Configuration>()[pcname]}/"}
}